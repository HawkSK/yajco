package ${lexerPackageName};

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.Interval;
import org.antlr.v4.runtime.misc.Pair;

import yajco.lexer.LexerException;
import yajco.lexer.Lexer;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class $lexerClassName implements TokenSource {
    private TokenFactory<?> tokenFactory = new CommonTokenFactory();
    private final CharStream inputStream;
    private final yajco.lexer.Lexer lexer;

    private static final LinkedHashMap<Integer, Pattern> tokens = new LinkedHashMap<Integer, Pattern>();
    private static final List<Pattern> skips = new ArrayList<Pattern>();

    static {
#set ($type = $firstUserTokenType)
#foreach ($regex in $tokens.values())
        tokens.put($type, Pattern.compile("$Utilities.encodeStringToJavaLiteral($regex)"));
#set ($type = $type + 1)
#end

#foreach ($skip in $skips)
        skips.add(Pattern.compile("$Utilities.encodeStringToJavaLiteral($skip.getRegexp())"));
#end
    }

    public $lexerClassName(CharStream inputStream) {
        this.lexer = new yajco.lexer.Lexer(
            inputStream.getText(new Interval(0, inputStream.size() - 1)),
            tokens,
            skips);

        this.inputStream = inputStream;
    }

    private Token createToken(int type, String text, int start, int stop, int line, int charPositionInLine) {
        return this.tokenFactory.create(
            new Pair(this, this.inputStream),
            type,
            text,
            Token.DEFAULT_CHANNEL,
            start,
            stop,
            line,
            charPositionInLine
        );
    }

    @Override
    public Token nextToken() {
        try {
            yajco.lexer.Token token = this.lexer.nextToken();
            if (token.isEOF()) {
                return createToken(Token.EOF, "", 0, 0, this.lexer.getLine(), this.lexer.getColumn());
            } else {
                yajco.lexer.Token.Position start = token.getGroupRange().getStart();
                yajco.lexer.Token.Position end = token.getGroupRange().getEnd();
                return createToken(token.getType(), token.getText(),
                    start.getIndex(), end.getIndex(),
                    token.getRange().getStart().getLine(), token.getRange().getStart().getColumn());
            }
        } catch (LexerException e) {
            // TODO
            throw new RuntimeException(e.getMessage(), e);
        }
    }

    @Override
    public int getLine() {
        return this.lexer.getLine();
    }

    @Override
    public int getCharPositionInLine() {
        return this.lexer.getColumn();
    }

    @Override
    public CharStream getInputStream() {
        return this.inputStream;
    }

    @Override
    public String getSourceName() {
        return IntStream.UNKNOWN_SOURCE_NAME;
    }

    @Override
    public void setTokenFactory(TokenFactory<?> tokenFactory) {
        this.tokenFactory = tokenFactory;
    }

    @Override
    public TokenFactory<?> getTokenFactory() {
        return tokenFactory;
    }
}
