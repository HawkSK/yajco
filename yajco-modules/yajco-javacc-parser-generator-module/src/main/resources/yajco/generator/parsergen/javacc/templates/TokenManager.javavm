#set( $tokenManagerClassName = $parserClassName + "TokenManager")
#set( $constantClassName = $parserClassName + "Constants")
package $parserJavaCCPackageName;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import yajco.lexer.LexerException;
import yajco.lexer.Lexer;

public class $tokenManagerClassName implements TokenManager, $constantClassName {
    private Token lastToken = null;

    private static final LinkedHashMap<Integer, Pattern> tokens = new LinkedHashMap<Integer, Pattern>();

    private static final List<Pattern> skips = new ArrayList<Pattern>();

    private final Lexer lexer;

    static {
#foreach( $entry in $tokens.entrySet() )
#if($entry.key==$entry.value)
        tokens.put($Utilities.encodeStringIntoTokenName($entry.key), Pattern.compile("$Utilities.encodeStringToJavaLiteral($Utilities.encodeStringIntoRegex($entry.value))"));
#end
#end

#foreach( $entry in $tokens.entrySet() )
#if($entry.key!=$entry.value)
        tokens.put($Utilities.encodeStringIntoTokenName($entry.key), Pattern.compile("$Utilities.encodeStringToJavaLiteral($entry.value)"));
#end
#end

#foreach( $skip in $skips )
        skips.add(Pattern.compile("$Utilities.encodeStringToJavaLiteral(${skip.getRegexp()})"));
#end
    }

    public $tokenManagerClassName(String input) {
        this.lexer = new Lexer(input, tokens, skips);
    }

    public Token getNextToken() {
        try {
            yajco.lexer.Token token = this.lexer.nextToken();
            if (token.isEOF()) {
                return Token.newToken(EOF);
            } else {
                Token adaptedToken = Token.newToken(token.getType(), token.getText());
                adaptedToken.beginLine = token.getRange().getStart().getLine();
                adaptedToken.beginColumn = token.getRange().getStart().getLine();
                adaptedToken.endLine = token.getRange().getEnd().getLine();
                adaptedToken.endColumn = token.getRange().getEnd().getLine();
                lastToken = adaptedToken;
                return adaptedToken;
            }
        } catch (LexerException e) {
            throw new TokenMgrError(false, 0, this.lexer.getLine(), this.lexer.getColumn(), lastToken == null ?
                "" : lastToken.image, this.lexer.getCurrentCharacter(), TokenMgrError.LEXICAL_ERROR);
        }
    }
}
