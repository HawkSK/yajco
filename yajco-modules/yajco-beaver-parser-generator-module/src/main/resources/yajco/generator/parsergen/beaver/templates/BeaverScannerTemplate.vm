##
## Input - parserName
## Input - parserPackage
## Input - terminals
## Input - regexps
## Input - language
## Input - defaultSymbolName
## Input - Utilities
#set( $className = $parserName + "Scanner" )
package $parserPackage;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.IOException;
import yajco.lexer.LexerException;
import yajco.lexer.Lexer;
import yajco.lexer.Token;
import beaver.Symbol;
import beaver.Scanner;
import ${parserPackage}.${parserName}.Terminals;

public class $className extends Scanner {
	private static final LinkedHashMap<Integer, Pattern> tokens = new LinkedHashMap<Integer, Pattern>();
	private static final List<Pattern> skips = new ArrayList<Pattern>();

	private final Lexer lexer;

	static {
#foreach( $terminal in $terminals )
#if( $terminal.name.startsWith($defaultSymbolName) )
#set( $regex = $regexps.get($terminal) )
		tokens.put((int) Terminals.${terminal.name}, Pattern.compile("$Utilities.encodeStringToJavaLiteral($Utilities.encodeStringIntoRegex($regex))"));
#end
#end

#foreach( $terminal in $terminals )
#if( !$terminal.name.startsWith($defaultSymbolName) )
#set( $regex = $regexps.get($terminal) )
		tokens.put((int) Terminals.${terminal.name}, Pattern.compile("$Utilities.encodeStringToJavaLiteral($regex)"));
#end
#end

#foreach( $skip in $language.skips )
		skips.add(Pattern.compile("$Utilities.encodeStringToJavaLiteral($skip.regexp)"));
#end
	}

	public ${className}(String input) {
        this.lexer = new Lexer(input, tokens, skips);
	}

	@Override
	public Symbol nextToken() throws IOException, Scanner.Exception {
        try {
            Token token = this.lexer.nextToken();
            if (token.isEOF()) {
                return new Symbol(Terminals.EOF, this.lexer.getLine(), this.lexer.getColumn());
            } else {
                int line = token.getRange().getStart().getLine();
                int column = token.getRange().getStart().getColumn();
                int length = token.getRange().getEnd().getIndex() - token.getRange().getStart().getIndex() + 1;
                return new Symbol((short) token.getType(), line, column, length, token.getText());
            }
        } catch (LexerException e) {
            Scanner.Exception exception = new Scanner.Exception(
                this.lexer.getLine(), this.lexer.getColumn(), e.getMessage());
            // Beaver sa pokusa o error recovering, a preto je nutne, aby sme preskocili dany nespravny znak, pretoze ak
            // sa tak neucini, tak vznikne nekonecny cyklus a vypisy na konzolu s danou chybou
            this.lexer.consumeInput(1);
            throw exception;
        }
	}
}